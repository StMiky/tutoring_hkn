% HKN - TUTORING - TESTBENCH
% Input patterns generation and output verification

clc
%clear all

%% Variables

% path of the file in which are stored the outputs of the algorithm
outFile = "../simulation/output.txt";

% Number of input patterns (change at wish):
N = 16;

% Input number of bits:
bit_n = 8;

%% Input generation

% Generate random inputs inside the proper range [-2^(bit_n-1), 2^(bit_n-1)-1]
A = randi([-2^(bit_n-1), 2^(bit_n-1)-1], N, 1);
B = randi([-2^(bit_n-1), 2^(bit_n-1)-1], N, 1);
C = randi([-2^(bit_n-1), 2^(bit_n-1)-1], 2*N, 1);
sign = randi([0, 1], 2*N, 1);

% Convert the random-generated numbers into binary fixed-point format data
% (in this particular case the values are integer signed numbers)
A_fixed = fi(A, 1, bit_n, 0);
B_fixed = fi(B, 1, bit_n, 0);
C_fixed = fi(C, 1, bit_n, 0);
sign_fixed = fi(sign, 0, 1, 0);

% Generate input char arrays that can be saved to a text file
A_file = A_fixed.bin;
B_file = B_fixed.bin;
C_file = C_fixed.bin;
sign_file = sign_fixed.bin;

% Print the input patterns on screen
% A_file
% B_file
% C_file
% sign_file

% Print the input patterns on files
dlmwrite('../simulation/A.txt', A_file, 'delimiter', '', 'newline', 'unix');
dlmwrite('../simulation/B.txt', B_file, 'delimiter', '', 'newline', 'unix');
dlmwrite('../simulation/C.txt', C_file, 'delimiter', '', 'newline', 'unix');
dlmwrite('../simulation/sign.txt', sign_file, 'delimiter', '', 'newline', 'unix');


%% Output evaluation
clear outFromSW
clear outFromSW_fixed

% --- PART 1 - Evaluate correct outputs --- %
res(1:2:2*N-1, 1) = A + (-1).^sign(1:2:2*N-1, 1).*C(1:2:2*N-1);
res(2:2:2*N, 1) = B + (-1).^sign(2:2:2*N, 1).*C(2:2:2*N);

outFromSW_fixed = fi(res, 1, bit_n+1, 0);
% outFromSW_fixed(1:2:2*N-1, 1) = A_fixed + C_fixed(1:2:2*N-1);
% outFromSW_fixed(2:2:2*N, 1) = B_fixed + C_fixed(2:2:2*N);

outFromSW = outFromSW_fixed.bin;

disp("NOTE! Execution stopped: please run the VHDL simulation and press a key")

pause

%% Read VHDL output
clear outFromVHDL
clear outString
clear outArray

% --- PART 2 - Read and save outputs generated by the VHDL-described circuit --- %

outString = fileread(outFile);
outArray = strsplit(outString);
outFromVHDL = char(outArray(1:2*N)');

%% Compare results

% --- PART 3 - Compare --- %
matches = zeros(2*N, 1);
for i=1:2*N
    if(strcmp(outFromSW(i, :), outFromVHDL(i, :)))
        matches(i) = 1;
    else
        matches(i) = 0;
    end
end
% matches'
if(matches == ones(2*N, 1))
    disp("Great! You're a true engineer!")
else 
    disp("Sorry, you suck u.u")
end 